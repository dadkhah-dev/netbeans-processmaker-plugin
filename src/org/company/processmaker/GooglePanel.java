/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.company.processmaker;

import com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

/**
 *
 * @author omid
 */
public class GooglePanel extends javax.swing.JPanel {

    /**
     * Creates new form GooglePanel
     */
    public GooglePanel() {
        initComponents();
        ((JLabel) jComboBoxProcess.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jComboBoxProcess = new javax.swing.JComboBox<>();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setPreferredSize(new java.awt.Dimension(430, 24));

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(GooglePanel.class, "GooglePanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBoxProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxProcess, 0, 381, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jComboBoxProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

//        String msg = "There is something you should know...";
//        NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
//        DialogDisplayer.getDefault().notify(nd);
        MainForm myFrame = new MainForm(this);   //title not necessary but it's there if you want it
        myFrame.setVisible(true); // toggles the frame to be visible inside the window
        myFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // th


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProcessActionPerformed
        // TODO add your handling code here:

        TreeFilesTopComponent TFT = TreeFilesTopComponent.getInstance();

        javax.swing.JTree T1 = TFT.getTree();
        //T1.removeAll();

        String CurrentCON_VALUE = String.valueOf(jComboBoxProcess.getSelectedItem());
        String CurrentPRO_UID = "";
        for (int i = 0; i < allProcess.size(); i++) {
            Process p = allProcess.get(i);
            if (CurrentCON_VALUE.equals(p.CON_VALUE)) {
                CurrentPRO_UID = p.PRO_UID;
            }

        }

        if (CurrentPRO_UID == "") {
            return;
        }

        String query = "SELECT d.DYN_UID,c.CON_VALUE,d.DYN_TYPE,d.DYN_FILENAME\n"
                + "FROM dynaform d\n"
                + "INNER JOIN content c ON d.DYN_UID = c.CON_ID AND c.CON_CATEGORY = 'DYN_TITLE' AND c.CON_LANG = 'fa'\n"
                + "WHERE d.PRO_UID = '" + CurrentPRO_UID + "'";

        List<String[]> res_dyna = execQuery(query, 4);
        TFT.setResDyna(res_dyna);
        Global gl_obj = Global.getInstance();
        gl_obj.setDyna(res_dyna);

        String Access = conf.get("Access");

        if (Access.equals("remote")) {
            SSH ssh = SSH.getInstance();

            ssh.setFilesToDowonlaod(res_dyna);
            if (ssh.downlaodFiles()) {
                String msg = "all files download Successfully!";
                NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
                DialogDisplayer.getDefault().notify(nd);
            } else {
                String msg = "error in download files!";
                NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
                DialogDisplayer.getDefault().notify(nd);
            }
        }

        DefaultMutableTreeNode top = new DefaultMutableTreeNode(CurrentCON_VALUE);

        DefaultMutableTreeNode a = new DefaultMutableTreeNode("Dyna Forms");
        top.add(a);

        for (int i = 0; i < res_dyna.size(); i++) {
            String[] res_row = res_dyna.get(i);

            DefaultMutableTreeNode c = performXmlForJs(res_row[1], res_row[0], res_row[3]);

            a.add(c);
        }

        // find trigger php code
        query = "SELECT TRI_WEBBOT,c.CON_VALUE,t.TRI_TYPE,t.TRI_UID,t.TRI_PARAM\n"
                + "FROM `triggers` t\n"
                + "inner join content c on c.CON_ID = t.TRI_UID and c.CON_CATEGORY='TRI_TITLE' and c.CON_LANG = 'fa'\n"
                + "WHERE t.PRO_UID = '" + CurrentPRO_UID + "'";

        List<String[]> res_trigger = execQuery(query, 4);
        List<String[]> tmp_trigger = new ArrayList<String[]>();

        DefaultMutableTreeNode t = new DefaultMutableTreeNode("Triggers");
        top.add(t);
        for (int i = 0; i < res_trigger.size(); i++) {
            String[] res_row = res_trigger.get(i);
            String[] tmp = {res_row[1], res_row[2], res_row[3], CurrentPRO_UID};
            tmp_trigger.add(tmp);

            DefaultMutableTreeNode u = performTriggerFile(res_row[1], res_row[0], res_row[3], CurrentPRO_UID);

            t.add(u);
        }
        TFT.setTrigger(tmp_trigger);

        DefaultTreeModel treeModel = new DefaultTreeModel(top);
        T1.setModel(treeModel);

        //T1.setModel(null)

    }//GEN-LAST:event_jComboBoxProcessActionPerformed

    // this function extract js code from xml file and return js file path name
    public DefaultMutableTreeNode performXmlForJs(String c, String dyna_UID, String filePath) {
        DefaultMutableTreeNode result = new DefaultMutableTreeNode(c);

        String fullPath;
        if (conf.isRemote()) {
            String[] res = filePath.split("/");
            fullPath = conf.get("local_tmp_for_remote") + filePath + "/" + res[1] + ".xml";
        } else {
            fullPath = conf.getXmlForms() + filePath + ".xml";
        }

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(fullPath);

            NodeList nodeList = doc.getElementsByTagName("*");
            //startDateNode.getTextContent();
            if (nodeList != null && nodeList.getLength() > 0) {
                for (int j = 0; j < nodeList.getLength(); j++) {
                    Node n = nodeList.item(j);

                    String type = "";

                    NamedNodeMap attrs = n.getAttributes();
                    if (attrs != null && attrs.getNamedItem("type") != null) {
                        type = attrs.getNamedItem("type").getNodeValue();
                    }

                    // only node element with attribute type = "javascript"
                    if (!type.equals("javascript")) {
                        continue;
                    }

                    // write to is file
                    try {

                        String content = n.getTextContent();
                        String path = "";
                        String dir = "";

                        if (conf.isRemote()) {
                            dir = conf.get("local_tmp_for_remote") + filePath + "/";
                            path = dir + n.getNodeName() + ".js";
                        } else {
                            dir = conf.tmp + "xmlForms/" + filePath + "/";
                            path = dir + n.getNodeName() + ".js";

                        }
                        File file = new File(path);

                        File directory = new File(dir);
                        if (!directory.exists()) {
                            directory.mkdirs();
                        }

                        // if file doesnt exists, then create it
                        if (!file.exists()) {
                            file.createNewFile();
                        }

                        FileWriter fw = new FileWriter(file.getAbsoluteFile());
                        BufferedWriter bw = new BufferedWriter(fw);
                        // write in file
                        bw.write(content);
                        // close connection
                        bw.close();
                    } catch (Exception e) {
                        // report
                        //Exceptions.printStackTrace(e);
                        String msg = "Error Can't write to disc!";
                        NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
                        DialogDisplayer.getDefault().notify(nd);
                    }

                    DefaultMutableTreeNode newTreeNode = new DefaultMutableTreeNode(n.getNodeName());
                    result.add(newTreeNode);
                }
            }

        } catch (Exception e) {
            //Exceptions.printStackTrace(e);
            String msg = "Can not handle xml form";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);
        }

        return result;

    }

    // this function save trigger php code to a file 
    public DefaultMutableTreeNode performTriggerFile(String name, String content, String fileName, String process) {
        DefaultMutableTreeNode result = new DefaultMutableTreeNode(name);

        // write to is file
        try {

            String dir = conf.tmp + "triggers/" + process + "/";
            String path = dir + fileName + ".php";

            File file = new File(path);

            File directory = new File(dir);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            // write in file

            // add php tag to file;
            content = "<?php\n" + content;
            bw.write(content);
            // close connection
            bw.close();
        } catch (Exception e) {
            // report
            //Exceptions.printStackTrace(e);
            String msg = "Error Can't write to disc!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);
        }

        return result;

    }

    private int getNumberOfNodes(TreeModel model, Object node) {
        int count = 1;
        int nChildren = model.getChildCount(node);
        for (int i = 0; i < nChildren; i++) {
            count += getNumberOfNodes(model, model.getChild(node, i));
        }
        return count;
    }

    public javax.swing.JComboBox<String> getjComboBoxProcess() {
        return this.jComboBoxProcess;
    }

    public List<String[]> execQuery(String query, int count) {

        try {

            conf = Config.getInstance();
            IP = conf.get("IP");
            Port = conf.get("Port");
            User = conf.get("User");
            Password = conf.get("Password");
            Database = conf.get("Database");
            Path = conf.get("Path");

            Class.forName("com.mysql.jdbc.Driver");

            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP + ":" + Port + "/" + Database + "?useUnicode=true&characterEncoding=UTF-8", User, Password);

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            List<String[]> rowValues = new ArrayList<String[]>();
            while (rs.next()) {
                String[] tmp = new String[count];
                for (int i = 0; i < count; i++) {
                    tmp[i] = rs.getString(i + 1);
                }
                rowValues.add(tmp);
            }

            con.close();

            return rowValues;

        } catch (ClassNotFoundException e) {
            //e.printStackTrace();
            String msg = "Connection Details is not valid!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        } catch (MySQLSyntaxErrorException ex) {
            //Exceptions.printStackTrace(ex);
            String msg = "Errot in connect to Mysql server!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        } catch (SQLException ex) {
            //Exceptions.printStackTrace(ex);
            String msg = "Errot in connect to Mysql server!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        } catch (Exception ex) {
            //Exceptions.printStackTrace(ex);
            String msg = "Errot in connect to Mysql server!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        }

        return null;
    }

    public static boolean updateQuery(String query) {

        try {

            Config conf = Config.getInstance();
            String IP = conf.get("IP");
            String Port = conf.get("Port");
            String User = conf.get("User");
            String Password = conf.get("Password");
            String Database = conf.get("Database");
            String Path = conf.get("Path");

            Class.forName("com.mysql.jdbc.Driver");

            Connection con = DriverManager.getConnection("jdbc:mysql://" + IP + ":" + Port + "/" + Database + "?useUnicode=true&characterEncoding=UTF-8", User, Password);

            Statement stmt = con.createStatement();
            int rs = stmt.executeUpdate(query);

            con.close();

            return true;

        } catch (ClassNotFoundException e) {
            //e.printStackTrace();
            String msg = "Connection Details is not valid!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        } catch (MySQLSyntaxErrorException ex) {
            //Exceptions.printStackTrace(ex);
            String msg = "Errot in connect to Mysql server!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        } catch (SQLException ex) {
            //Exceptions.printStackTrace(ex);
            String msg = "Errot in connect to Mysql server!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        } catch (Exception ex) {
            //Exceptions.printStackTrace(ex);
            String msg = "Errot in connect to Mysql server!";
            NotifyDescriptor nd = new NotifyDescriptor.Message(msg, NotifyDescriptor.INFORMATION_MESSAGE);
            DialogDisplayer.getDefault().notify(nd);

        }

        return true;
    }

    public List<Process> allProcess;
    public String IP;
    public String Port;
    public String User;
    public String Password;
    public String Database;
    public String Path;
    private Config conf;

    public String CurrentPRO_UID;
    public String CurrentCON_VALUE;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxProcess;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}

class Process {

    public String PRO_UID;
    public String CON_VALUE;
}
